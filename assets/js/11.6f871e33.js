(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{253:function(t,a,s){t.exports=s.p+"assets/img/database-tables-1.2ab46fb9.png"},288:function(t,a,s){"use strict";s.r(a);var e=s(5),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("In the "),e("RouterLink",{attrs:{to:"/2020/02/13/building-scalable-apps-1-introduction/"}},[t._v("first part of this series")]),t._v(" we briefly discussed that minimizing your\nservice response time is the main key to being able to serve hundreds of even thousands of simultaneous of users.")],1),t._v(" "),e("blockquote",[e("p",[t._v("Database optimizations are often the simplest means of achieving performance gains in your application.")])]),t._v(" "),e("h2",{attrs:{id:"why-start-with-the-database"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-start-with-the-database"}},[t._v("#")]),t._v(" Why Start With the Database?")]),t._v(" "),e("p",[t._v("Many web applications have some sort of database backing store, and usually this is right at the bottom of the request call stack.\nI.e. a call to your website or web API will probably invoke some sort of controller or handler, followed by a call to some business logic\nor perhaps a remote service, which ultimately retrieves data from a data store.")]),t._v(" "),e("p",[t._v('In future posts we will discuss various forms of caching which can lead to huge performance increases, but before "patch" over\nour underlying performance problems, lets fix what we can at the very source: the database.')]),t._v(" "),e("p",[e("img",{attrs:{src:s(253),alt:"Database Tables 1"}})]),t._v(" "),e("h2",{attrs:{id:"types-of-databases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#types-of-databases"}},[t._v("#")]),t._v(" Types of Databases")]),t._v(" "),e("p",[t._v("The most commonly used databases fall into a few very broad categories:")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Relational (SQL)")]),t._v(" databases such as Microsoft SQL and MySQL")]),t._v(" "),e("li",[e("strong",[t._v("Document")]),t._v(" databases such as MongoDb, Couchbase and Azure DocumentDB")]),t._v(" "),e("li",[e("strong",[t._v("Key/value")]),t._v(" stores such as Redis")])]),t._v(" "),e("p",[t._v("We will be mainly focusing on relational databases, but some of the concepts (such as indexing) also apply to document data stores.")]),t._v(" "),e("h2",{attrs:{id:"database-optimizations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#database-optimizations"}},[t._v("#")]),t._v(" Database Optimizations")]),t._v(" "),e("p",[t._v("Let's get straight to the point! In the examples below, we will assume a web API built using ASP.Net Core, Entity Framework Core and\nMicrosoft SQL Server. Note that the list of optimizations below is by no means exhaustive!")]),t._v(" "),e("p",[t._v("Feel free to jump down to a specific topic:")]),t._v(" "),e("ol",[e("li",[e("a",{attrs:{href:"#optimization-1-indexing"}},[t._v("Indexing")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#optimization-2-transaction-isolation-levels"}},[t._v("Transaction Isolation Levels")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#optimization-3-reading-large-text-fields-using-sequential-access"}},[t._v("Reading Large Text Fields Using Sequential Access")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#optimization-4-rewriting-your-queries"}},[t._v("Rewriting Your Queries")])])]),t._v(" "),e("h3",{attrs:{id:"optimization-1-indexing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optimization-1-indexing"}},[t._v("#")]),t._v(" Optimization #1: Indexing")]),t._v(" "),e("p",[t._v("Indexing your database correctly is perhaps the simplest means of achieving better performance in your data access layer.\nAn index basically allows your database to look up values for a particular column in a lookup table instead of searching through every single\ndatabase row to find the value. In computer science terms, the complexity of an indexed lookup operation for a unique column is O(1) as opposed to O(N) - an N/2-fold performance increase.")]),t._v(" "),e("p",[t._v("So where's the catch? Creating an index consumes extra storage space and additionally requires additional computation for insert and update operations.\nHowever, most of our applications perform read operations far more frequently than write, so:")]),t._v(" "),e("blockquote",[e("p",[t._v("As a general rule of thumb, you should create an index for any combination of fields you frequently query on -\ni.e. anything that appears on a "),e("code",[t._v("WHERE")]),t._v(" clause.")])]),t._v(" "),e("h4",{attrs:{id:"example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" Example")]),t._v(" "),e("p",[t._v("Assume the following entity:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" UserId "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" DisplayName "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" Username "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" Enabled "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" Type "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" Domain "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" UserType\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Guest "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Member "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Admin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("We're using Entity Framework Core, so our data context might look something like this:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataContext")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DbContext")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("DataContext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DbContextOptions")]),t._v(" options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("base")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("OnModelCreating")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelBuilder")]),t._v(" builder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" DbSet"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("User"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Users "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Now imagine we have the following methods in a users service or repository and that our DataContext has been\ninjected into the class:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Task"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("User"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetUsersByIdAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" userId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _dbContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("FindAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("userId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Task"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("User"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetUserByUsernameAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _dbContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Where")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" u"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Username "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("FirstOrDefaultAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Task"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AuthenticateUserAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" passwordHash"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _dbContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Where")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" u"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Username "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" username "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" u"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PasswordHash "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" passwordHash "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" u"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("FirstOrDefaultAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("_\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Task"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("List"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("User"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetUsersForDomainAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" domain"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserType")]),t._v(" type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _dbContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Where")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" u"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Domain "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" domain "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" u"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"what-s-the-problem"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-s-the-problem"}},[t._v("#")]),t._v(" What's the problem?")]),t._v(" "),e("p",[t._v("Let's assume the "),e("code",[t._v("AuthenticateUserAsync()")]),t._v(" function is called every time a user logs in. We put this code into production and send\na promotion to thousands of users inviting them to open our app and ultimately log in. Very quickly, we have thousands of queries\nsearching through thousands of user records to find records matching both username and password hash. We have a powerful server, and a single\noperation only takes 500ms, however with thousands of simultaneous queries, that's not good enough: we've exhausted the available database\nconnections and everything grinds to a halt.")]),t._v(" "),e("blockquote",[e("p",[t._v('What worked just fine "on my PC" doesn\'t scale in a production environment with hundreds of simultaneous users.')])]),t._v(" "),e("h4",{attrs:{id:"the-solution-adding-indexes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#the-solution-adding-indexes"}},[t._v("#")]),t._v(" The Solution: Adding Indexes")]),t._v(" "),e("p",[t._v("So how do we know which columns to index? One option is to use "),e("code",[t._v("Microsoft Server Profiler")]),t._v(" (or a similar tool) to monitor queries (live) and subsequently "),e("code",[t._v("Tuning Advisor")]),t._v(" to\nsuggest which indexes we should add. These tools are invaluable for complex applications, but require realistic sample queries in order to provide\nmeaningful results.")]),t._v(" "),e("p",[t._v("In a simple application like ours, static analysis of the code gets us a long way - i.e. we can make assumptions from the queries we have written as to which\nindexes will be most suitable.")]),t._v(" "),e("ol",[e("li",[t._v("The first query ("),e("code",[t._v("GetUsersByIdAsync(...)")]),t._v(") gets the user by ID. Due to conventions Entity Framework already treats this column as the primary key and primary keys are always indexed - so probably don't need to do anything here.")]),t._v(" "),e("li",[t._v("The second query ("),e("code",[t._v("GetUserByUsernameAsync(...)")]),t._v(") performs a query on the Username column. This is not indexed by default and should certianly be indexed.")]),t._v(" "),e("li",[t._v("The third query ("),e("code",[t._v("AuthenticateuserAsync(...)")]),t._v(") performs a query on three columns: Username, PasswordHash and Enabled. Here we should create an index which consists of all three columns.\nUsually indexing a bit/boolean field  really doesn't make sense because it only has two possible values. In combination with the other two fields it probably wouldn't hurt though.")]),t._v(" "),e("li",[t._v("The forth query ("),e("code",[t._v("GetUsersForDomainAsync(...)")]),t._v(") is once again a candidate for an index with multiple columns: Domain and Type")])]),t._v(" "),e("p",[t._v("Here's what the DataContext class might look like after specifying these indexes:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[t._v("\n "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataContext")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DbContext")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("DataContext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DbContextOptions")]),t._v(" options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("base")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("OnModelCreating")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ModelBuilder")]),t._v(" builder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Let's be explicit about the primary key")]),t._v("\n        builder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token generic-method"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Entity")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("HasKey")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("u "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" u"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UserId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unique index for Username")]),t._v("\n        builder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token generic-method"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Entity")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("HasIndex")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsUnique")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Unique index for Username, PasswordHash (??)")]),t._v("\n        builder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token generic-method"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Entity")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("HasIndex")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Username"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PasswordHash"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Enabled "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsUnique")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Non-unique index for Domain, Type")]),t._v("\n        builder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token generic-method"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Entity")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("HasIndex")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Domain"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Type "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsUnique")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" DbSet"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("User"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Users "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])]),e("p",[t._v("Looking at the indexes defined above we might note that since Username already is a unique index, creating another index which combines\nUsername, PasswordHash and Enabled probably isn't necessary and can be removed. The SQL server will should optimize query execution to use\nthe Username index, even if PasswordHash and Enabled are included in the query.")]),t._v(" "),e("blockquote",[e("p",[t._v("Indexes can also be added directly via SQL and these principals apply to other sorts of databases, including document databases such as\nMongoDb.")])]),t._v(" "),e("h3",{attrs:{id:"optimization-2-transaction-isolation-levels"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optimization-2-transaction-isolation-levels"}},[t._v("#")]),t._v(" Optimization #2: Transaction Isolation Levels")]),t._v(" "),e("p",[t._v("Another common problem which may cause your application to slow down or hang (dead lock) is when multiple requests access the same rows or table at the same time.")]),t._v(" "),e("p",[t._v("In SQL databases, concurrency is controlled by "),e("em",[t._v("transaction isolation level")]),t._v(". One or more queries can be executed\nin a single transaction. In Entity Framework a call to "),e("code",[t._v("SaveChanges()")]),t._v(" on the DbContext will typically result\nin all changes applied to objects in the context being executed within the same database transaction. If an error occurs during any of the INSERT, UPDATE or DELETE\nqueries within a transaction before it is "),e("em",[t._v("committed")]),t._v(", all the changes in that transaction will be rolled back.")]),t._v(" "),e("p",[t._v("Transaction isolation levels provide a trade-off between data consistency and data concurrency. High consistency typically means low concurrency and vice-versa.")]),t._v(" "),e("h4",{attrs:{id:"ms-sql-isolation-levels"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ms-sql-isolation-levels"}},[t._v("#")]),t._v(" MS SQL Isolation Levels")]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("Read Uncommitted")]),t._v(" - no read locks are placed on data, meaning that modified rows can be read, even if the transaction that modified the row hasn't been committed yet. This may lead to a 'dirty read' if the modification is rolled back.")]),t._v(" "),e("li",[e("strong",[t._v("Read Committed")]),t._v(" - read locks prevent data modified in another transaction from being read before that transaction has been committed. This avoids dirty reads but can quickly lead to performance problems.")]),t._v(" "),e("li",[e("strong",[t._v("Repeatable Read")]),t._v(" - in addition to read locks, modify locks prevent any data being read by another uncommitted transaction from being modified.")]),t._v(" "),e("li",[e("strong",[t._v("Serializable")]),t._v("`- the strictest isolation level, which in addition to read and modify locks, also prevents new rows from being inserted within a range that is currently being queried in another transaction.")]),t._v(" "),e("li",[e("strong",[t._v("Snapshot")]),t._v(' - rather than placing locks on rows, this isolation level allows the transaction to access a "snapshot" of the database, essentially making changes performed in other transactions invisible. If '),e("em",[t._v("conflicting")]),t._v(" changes have been made in other transactions (i.e. two transactions modify the same row simultaneously), commit will fail."),e("br"),t._v("\nThe (slight) downside with snapshot isolation is increased memory and CPU consumption as well as the chance of commits failing and rolling back the transaction.")])]),t._v(" "),e("p",[t._v("In most applications, reading occurs far more frequently than writing and the chance of modifying the same record simultaneously is even slimmer.")]),t._v(" "),e("p",[t._v("Snapshot isolation essentially introduces a form of "),e("em",[t._v("optimistic concurrency")]),t._v(" where errors only occur if two requests modify the same row(s) simultaneously. This makes "),e("em",[t._v("snapshot isolation")]),t._v(" a great candidate for avoiding deadlocks whilst maintaining a high level of isolation. Should a commit fail due to a conflict, the transaction\ncan simply be retried - or depending on the application - the end-user could be notified of a conflict.")]),t._v(" "),e("blockquote",[e("p",[t._v("In Entity Framework, the default isolation level is "),e("code",[t._v("Read Committed")]),t._v(". However, Microsoft SQL has a couple of options which\nallows all "),e("code",[t._v("Read Committed")]),t._v(" transactions to be treated as "),e("code",[t._v("Snapshot")]),t._v(" isolation transactions!")])]),t._v(" "),e("p",[t._v("To enable this function globally for your MS SQL database, run the following SQL commands:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ALTER DATABASE MyDatabase  \nSET ALLOW_SNAPSHOT_ISOLATION ON  \n  \nALTER DATABASE MyDatabase  \nSET READ_COMMITTED_SNAPSHOT ON  \n\n")])])]),e("blockquote",[e("p",[t._v("These two commands can lead to significant performance improvements with very little effort!")])]),t._v(" "),e("h4",{attrs:{id:"why-not-remove-isolation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#why-not-remove-isolation"}},[t._v("#")]),t._v(" Why Not Remove Isolation?")]),t._v(" "),e("p",[t._v("It can be tempting to completely remove isolation using "),e("code",[t._v("NO LOCK")]),t._v(" statements or "),e("code",[t._v("Read Uncommitted")]),t._v(" in SQL. In some cases, this may be completely appropriate - and highly performant - for example when\nretrieving non-critical log data where there are many write operations, but data consistency is less important.")]),t._v(" "),e("p",[t._v("In general, however, removing isolation can result in unexpected data inconsistency issues which are not apparent in a single user development environment and hard to reproduce.")]),t._v(" "),e("h4",{attrs:{id:"other-database-technologies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#other-database-technologies"}},[t._v("#")]),t._v(" Other Database Technologies")]),t._v(" "),e("p",[t._v("Transactional isolation applies to all types of relational (SQL) databases and to an extent also to document databases.\nFor example, optimistic concurrency at document level can easily be achieved in MongoDb by adding and checking a document version field.")]),t._v(" "),e("p",[t._v("Understanding the trade-offs and gains to be made here can be essential to creating performant and yet reliable apps.")]),t._v(" "),e("h3",{attrs:{id:"optimization-3-reading-large-text-fields-using-sequential-access"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optimization-3-reading-large-text-fields-using-sequential-access"}},[t._v("#")]),t._v(" Optimization #3: Reading Large Text Fields Using Sequential Access")]),t._v(" "),e("p",[t._v("Yet another, more seldom pitfall we've come across is performance issues related to reading large fields of type "),e("code",[t._v("NVARCHAR(MAX)")]),t._v(" or "),e("code",[t._v("VARBINARY(MAX)")]),t._v(".")]),t._v(" "),e("p",[t._v("In our scenario, we were using SQL as a key value store (for caching) and the value field sometimes contained several megabytes of JSON data.")]),t._v(" "),e("p",[t._v("Using "),e("code",[t._v("SQL Server Profiler")]),t._v(" we discovered that very simple SELECT queries on a properly indexed table where taking unexpectedly  long to complete.\nIt turns out that this was due to the large amount of data we had stored in each row and the way the Entity Framework / ADO.Net driver was accessing the database.")]),t._v(" "),e("p",[t._v("We were able to get "),e("em",[t._v("significant")]),t._v(" performance gains by using "),e("em",[t._v("sequential access")]),t._v(" mode when querying our data. To our knowledge, this is not supported by\nEntity Framework Core, but very simple using ADO.Net directly:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" command "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DbContext"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetDbConnection")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateCommand")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CommandText "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT TOP 1 [Value] FROM [KeyValues] WHERE [Key] = @key"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Parameters"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SqlParameter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@key"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Transaction "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("CurrentTransaction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetDbTransaction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" Db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("OpenConnectionAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Execute reader using Sequential Access")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dr "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" command"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExecuteReaderAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CommandBehavior"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SequentialAccess"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        currentValue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    dr"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Close")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),e("h3",{attrs:{id:"optimization-4-rewriting-your-queries"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#optimization-4-rewriting-your-queries"}},[t._v("#")]),t._v(" Optimization #4: Rewriting Your Queries")]),t._v(" "),e("p",[t._v("As always, a thorough review of your code may help uncover issues. Particularly look out for instances where\nyou are performing many queries in a loop.\nRetrieving more data in fewer queries is usually much faster than executing many queries to retrieve small amounts of data.")]),t._v(" "),e("h4",{attrs:{id:"example-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-2"}},[t._v("#")]),t._v(" Example")]),t._v(" "),e("p",[t._v("Let's say you want to return a list of users and their logins which incidentally are stored in another table.\nInitially, you might retrieve all the users, and then for each user, perform a new query to retrieve records from the logins table.\nA simple, but non-performant solution.")]),t._v(" "),e("h4",{attrs:{id:"solutions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solutions"}},[t._v("#")]),t._v(" Solutions")]),t._v(" "),e("p",[t._v("There are a number of solutions to a scenario like this. Here are just a few suggestions:")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("You might consider constructing a query which joins the users table to the logins table and retrieves all the data with just a single query.\nThis might work well for 1-to-1 relationships, however if each user has many logins, this will result in a lot of redundent (duplicate) data being retrieved from the users table.\nIn addition it might not map so well to your entity classes.")])]),t._v(" "),e("li",[e("p",[t._v("Another strategy might be to retrieve the users first and then construct a list of userIDs which is used to form a single query to retrieve all the logins for all the users.\nNow we've only executed two queries. That might be great, but if we've got thousands of users, the WHERE clause in logins query might be enormous and either lead to a slow query or\nexeed the query length limits.")])]),t._v(" "),e("li",[e("p",[t._v("Yet another strategy is simply to retrieve all the rows from the logins table and apply filtering in code. This could result in a faster query since there is no WHERE clause\nand could be performed in bulks to avoid exessive memory usage.")])])]),t._v(" "),e("blockquote",[e("p",[t._v("The solution that fits your scenario will entirely depend on the amount of data being retrieved.")])]),t._v(" "),e("p",[t._v("We may even decide to implement two strategies: one which is used for a limited number of users (e.g. strategy 2) and another strategy when\nretrieving all or most users (e.g. strategy 3).")]),t._v(" "),e("blockquote",[e("p",[t._v("Being creative and willing to combine several query strategies can ensure that your data layer is performant both when returning data for a single user\nbut also when you're returning data for many users (e.g in a reporting or data-sync scenario).")])]),t._v(" "),e("h3",{attrs:{id:"a-note-on-sql-named-instances"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-note-on-sql-named-instances"}},[t._v("#")]),t._v(" A Note on SQL Named Instances")]),t._v(" "),e("p",[t._v("During stresstesting we noticed connection problems when running many simulataneous queries on a SQL Server "),e("em",[t._v("named instance")]),t._v(".")]),t._v(" "),e("p",[t._v("By default, MS SQL Server named instances use dynamic ports (instead of the standard port 1433).\nThese dynamic ports are retrieved via UDP 1434. Under high load we seemed to experience socket or resource exhaustion.")]),t._v(" "),e("p",[t._v("The solution was simply to assign a dedicated port to the named instance (e.g. 1435) and include this in the connection string:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Server=MyDatabaseServer\\InstanceName,1435\n")])])]),e("h3",{attrs:{id:"further-optimizations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#further-optimizations"}},[t._v("#")]),t._v(" Further Optimizations")]),t._v(" "),e("p",[t._v("The intention of this post was to provide a broad overview of some common bottlenecks related to the way we use\nand configure databases.")]),t._v(" "),e("p",[t._v("Of course, we've just touched the surface and there are a whole lot of optimizations that\ncan be done in the way we use and configure Entity Framework (or any other object relational mapper) much of which is well documented.")]),t._v(" "),e("blockquote",[e("p",[t._v("Stay tuned! In our next post we intend to discuss some interesting caching strategies!")])]),t._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References:")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://docs.microsoft.com/en-us/ef/core/saving/transactions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Entity Framework Core - Using Transactions"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.sqlservercentral.com/articles/isolation-levels-in-sql-server",target:"_blank",rel:"noopener noreferrer"}},[t._v("Isolation Levels in SQL Server"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"posts-in-this-series"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#posts-in-this-series"}},[t._v("#")]),t._v(" Posts in this Series")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/2020/02/13/building-scalable-apps-1-introduction/"}},[t._v("Building Scalable Apps (Part 1) - Introduction")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/2020/02/14/building-scalable-apps-2-database-optimization/"}},[t._v("Building Scalable Apps (Part 2) - Database Optimization")])],1),t._v(" "),e("li",[t._v("Building Scalable Apps (Part 3) - Server Caching Techniques "),e("em",[t._v("(Planned)")])]),t._v(" "),e("li",[t._v("Building Scalable Apps (Part 4) - Async Programming "),e("em",[t._v("(Planned)")])]),t._v(" "),e("li",[t._v("Building Scalable Apps (Part 5) - Http Optimizations "),e("em",[t._v("(Planned)")])]),t._v(" "),e("li",[t._v("Building Scalable Apps (Part 6) - Event Driven Architectures "),e("em",[t._v("(Planned)")])]),t._v(" "),e("li",[t._v("Building Scalable Apps (Part 7) - Realistic Load Testing "),e("em",[t._v("(Planned)")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);